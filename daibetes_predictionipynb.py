# -*- coding: utf-8 -*-
"""Daibetes_predictionipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_87W38qorbnGB2CftnSk-pWEb5l9gTG_
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis
PIMA Diabetes Dataset

"""

# loading the diabetes dataset to a pandas dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

pd.read_csv?

#printing first 5 rows of the dataset
diabetes_dataset.head()

# number of rows of columns in this dataset
diabetes_dataset.shape

# getting the statistical measure of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0--->Non-diabetic
1--->Diabetic

"""

diabetes_dataset.groupby('Outcome').mean()

# seprating data and labels
X=diabetes_dataset.drop(columns='Outcome',axis=1)
Y=diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler =StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)

print(standardized_data)

X= standardized_data
Y=diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split

"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Training the Model

"""

classifier=svm.SVC(kernel='linear')

#training the support vector machine Classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation
Accuracy Score
"""

#accuracy score on the training data
X_train_prediction=classifier.predict(X_train)
train_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of the training data:',train_data_accuracy)

#accuracy score on the test data
X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy scoe of the trining data:',test_data_accuracy)

"""Making Predictive System"""

input_data =(2,197,70,45,543,30.5,0.158,53)

#chainging the nput data of numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data =scaler.transform(input_data_reshaped)
print(std_data)

prediction =classifier.predict(std_data)
print(prediction)

if(prediction[0]==0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

